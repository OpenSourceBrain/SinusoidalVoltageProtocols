<Lems xmlns="http://www.neuroml.org/lems/0.7.4"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.neuroml.org/lems/0.7.4 https://raw.githubusercontent.com/LEMS/LEMS/master/Schemas/LEMS/LEMS_v0.7.4.xsd"
      description="New voltage clamp type(s)">


    <ComponentType name="sinusoidalVoltageClamp" extends="baseVoltageDepPointCurrent"
                   description="Voltage clamp. Work in progress...">

        <Property name="weight" dimension="none" defaultValue="1"/> 
        
        
        <Parameter name="delay" dimension="time" description="Delay before switching...."/>
        <Parameter name="duration" dimension="time" description="Duration to apply ..."/>
        
        <Parameter name="baselineVoltage" dimension="voltage" description="Target voltage before and after time delay"/>
        
        <Parameter name="sineAmplitude" dimension="voltage" description="Target..."/>
        <Parameter name="sinePeriod" dimension="time" description="Target..."/>
        
        <Parameter name="simpleSeriesResistance" dimension="resistance" description="Current will be calculated by the difference in voltage between the target and parent, divided by this value"/>

        
        <Exposure name="targetVoltage" dimension="voltage"/> <!-- See below for usage -->
        
        <!--TODO: remove! Only required as EventConnection is used in explicitInput to
        connect inputs to cells. Events aren't passed! ... -->
        <EventPort name="in" direction="in" description="Note this is not used here. Will be removed in future"/>

        <Dynamics>

            <StateVariable name="i" exposure="i" dimension="current"/>
            
            <DerivedVariable name="timeOffset" dimension="time" value="t-delay"/>
            <DerivedVariable name="targetVoltage" dimension="voltage" exposure="targetVoltage" value="baselineVoltage + (sineAmplitude * sin(2 * 3.14159265359 * timeOffset/sinePeriod))"/>

            <OnEvent port="in"><!--TODO: remove, see above...
            <StateAssignment variable="i" value="0"/>-->
            </OnEvent>

            <OnCondition test="t .lt. delay">
                <StateAssignment variable="i" value="weight * (baselineVoltage - v) / simpleSeriesResistance"/>
            </OnCondition>

            <OnCondition test="t .geq. delay">
                <StateAssignment variable="i" value="weight * (targetVoltage - v) / simpleSeriesResistance"/>
            </OnCondition>

            <OnCondition test="t .gt. duration + delay">
                <StateAssignment variable="i" value="weight * (baselineVoltage - v) / simpleSeriesResistance"/>
            </OnCondition>

        </Dynamics>


    </ComponentType>
    
</Lems>